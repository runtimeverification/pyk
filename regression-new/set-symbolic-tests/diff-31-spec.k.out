[Warning] Compiler: Variable 'Z' defined but not used. Prefix variable name
with underscore if this is intentional.
	Source(diff-31-spec.k)
	Location(9,22,9,23)
	9 |	    claim <k> diff ( Z:MyId in ( (S SetItem(X:MyId)) -Set SetItem(Y:MyId)
) )     => . </k>
	  .	                     ^
[Warning] Compiler: Variable 'S' defined but not used. Prefix variable name
with underscore if this is intentional.
	Source(diff-31-spec.k)
	Location(9,35,9,36)
	9 |	    claim <k> diff ( Z:MyId in ( (S SetItem(X:MyId)) -Set SetItem(Y:MyId)
) )     => . </k>
	  .	                                  ^
[Warning] Compiler: Variable 'X' defined but not used. Prefix variable name
with underscore if this is intentional.
	Source(diff-31-spec.k)
	Location(9,45,9,46)
	9 |	    claim <k> diff ( Z:MyId in ( (S SetItem(X:MyId)) -Set SetItem(Y:MyId)
) )     => . </k>
	  .	                                            ^
[Warning] Compiler: Variable 'Y' defined but not used. Prefix variable name
with underscore if this is intentional.
	Source(diff-31-spec.k)
	Location(9,67,9,68)
	9 |	    claim <k> diff ( Z:MyId in ( (S SetItem(X:MyId)) -Set SetItem(Y:MyId)
) )     => . </k>
	  .	                                                                  ^
[Warning] Compiler: Use of deprecated production found; this syntax may be
removed in the future.
	Source(diff-31-spec.k)
	Location(9,86,9,87)
	9 |	    claim <k> diff ( Z:MyId in ( (S SetItem(X:MyId)) -Set SetItem(Y:MyId)
) )     => . </k>
	  .	                                                                          
          ^
APRProof: 74c1b44d7893101822e654a904827f6af3703fd57c5237e63aa73230bdd68ee5
    status: ProofStatus.FAILED
    admitted: False
    nodes: 5
    pending: 0
    failing: 1
    vacuous: 0
    stuck: 1
    terminal: 0
    refuted: 0
    bounded: 0
    execution time: 0s
Subproofs: 0
1 Failure nodes. (0 pending and 1 failing)

Failing nodes:

  Node id: 5
  Failure reason:
    Matching failed.
    The following cells failed matching individually (antecedent #Implies consequent):
    K_CELL: diffResult ( Z:MyId in SetItem ( X:MyId ) S:Set -Set SetItem ( Y:MyId ) ) ~> .K #Implies .K
  Path condition:
    { false #Equals X:MyId in S:Set }
  Failed to generate a model.

Join the Runtime Verification Discord server for support: https://discord.gg/CurfmXNtbN
